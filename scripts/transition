#! /usr/bin/env ruby

require 'roby'
require 'syskit'
require 'Qt'
require 'metaruby/gui/html/page'
require 'syskit/gui/page'
require 'syskit/gui/component_network_view'

#GUI = false 
GUI = true

GC.stress = true 



def update(plan, requirement_tasks)
    engine = Syskit::NetworkGeneration::Engine.new(plan)
    engine.resolve(:requirement_tasks => requirement_tasks)
end

def precompute(plan,possible_actions)
    possible_actions.each_with_index do |requirements, idx|
        #adding everything to the plan for now
        requirement_tasks = requirements.map do |req|
            plan.add_mission(task = req.as_plan)
            puts "root task is #{task} with ID #{task.object_id}"
            task.planning_task
        end
        #letting do the engine the caluclation
        engine = Syskit::NetworkGeneration::Engine.new(plan)
        engine.precompute(:requirement_tasks => requirement_tasks)
        #releaseing it to make sure it does not incluenve the real-plan
        requirement_tasks.each do |t|
            plan.unmark_mission t.planned_task
        end
    end
end

begin
    
#    passes << [Main.pipeline_def.to_instance_requirements,Main.joystick_dev.to_instance_requirements]
#    passes << [Main.buoy_def.to_instance_requirements,Main.joystick_dev.to_instance_requirements]
#    passes << [Main.target_move_def.to_instance_requirements,Main.joystick_dev.to_instance_requirements]
#    passes << [Main.pipeline_def.to_instance_requirements,Main.joystick_dev.to_instance_requirements]
#    passes << [Main.buoy_def.to_instance_requirements,Main.joystick_dev.to_instance_requirements]
#    passes << [Main.target_move_def.to_instance_requirements,Main.joystick_dev.to_instance_requirements]


#loop do #stresstest
Roby.app.robot 'avalon'
Roby.app.using_plugins 'syskit'
Syskit.conf.only_load_models = true
Syskit.conf.disables_local_process_server = true
Roby.app.single = true
app = Qt::Application.new(ARGV) if GUI

if GUI
    display = Qt::WebView.new
    display.show
    page = MetaRuby::GUI::HTML::Page.new(display.page)
    rendering = Syskit::GUI::ComponentNetworkView.new(page)
    if false 
        plan = Roby::Plan.new 
        rendering.plan = plan
    else
        plan = rendering.plan
    end
else
    plan = Roby::Plan.new 
end

Syskit.conf.disable_logging
Syskit.conf.disable_conf_logging

    Roby.app.setup
    passes = []
    passes << [Main.joystick_dev.to_instance_requirements]
    passes << [Main.pipeline_def.to_instance_requirements,Main.joystick_dev.to_instance_requirements]
#    passes << [Main.buoy_def.to_instance_requirements,Main.joystick_dev.to_instance_requirements]
#    passes << [Main.target_move_def.to_instance_requirements,Main.joystick_dev.to_instance_requirements]
#    passes << [Main.target_move_def.to_instance_requirements]
#    passes << [Main.pipeline_def.to_instance_requirements]
#    passes << [Main.buoy_def.to_instance_requirements]
    passes.each_with_index do |requirements, idx|
        #Precalculae everything every cycle
        STDOUT.puts "!!!!!!!!!!!!!! startin precalculation"
        precompute(plan, passes)
        STDOUT.puts "PRECALC Finished, now we allowed to have a match!!!!!!!!!!!!!!!!!"
        
        requirement_tasks = requirements.map do |req|
            plan.add_mission(task = req.as_plan)
            puts "instanciated root task #{task} with ID #{task.object_id}"
            task.planning_task
        end

        update(plan, requirement_tasks)
        plan.static_garbage_collect do |task|
            plan.remove_object(task)
        end

        requirement_tasks.each do |t|
            plan.unmark_mission t.planned_task
        end
        if GUI
            rendering.render_plan(:id => idx.to_s, :mode => 'dataflow')
        end
    end
    ensure Roby.app.cleanup
end
#end

STDOUT.puts "------------------- FINISHED --------------------------"
app.exec if GUI

