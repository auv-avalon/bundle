--- name:default
# Lists which command parameter are being controlled on a per-joint basis.
# 
# If left empty, uses RAW by default
control_modes: []
# This property defines which parts of the command input is expected to be
# set once we merged all the declared input ports.
expected_inputs:
  linear:
  - true
  - true
  - true
  angular:
  - true
  - true
  - true
# If true, the component will send a zero command before getting into an
# exception state. Otherwise, it will not do anything
keep_position_on_exception: true
# Limits of the thrusters
# 
# Leave empty if you don't want to limit anything (is that really a good
# idea ?)
limits:
  names: ["right", "left", "dive", "pitch", "strave", "yaw"]
  elements:
  - min: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: -0.75
    max: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: 0.75
  - min: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: -0.75
    max: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: 0.75
  - min: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: -0.75
    max: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: 0.75
  - min: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: -0.75
    max: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: 0.75
  - min: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: -0.75
    max: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: 0.75
  - min: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: -0.75
    max: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: 0.75
# Matrix with size of 6 * n. n means the count of thrusters that are used.
# The rows 0 to 2 of the matrix are the linear axis. The lines 3 to 5 of the
# matrix are the angular axis.
matrix:
  rows: 6
  cols: 6
  data:
  - 0.0    # Pitch Thruster
  - 0.0
  - -0.350
  - 0.0
  - -0.75
  - 0.0
  - 0.0    # Dive Thruster
  - 0.0
  - -0.75
  - 0.0
  - 0.25
  - 0.0
  - -0.63 # Right Thruster?
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0   
  - 0.75 # Left Thruster ?
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0   
  - 0.0   # Yaw thruster
  - -0.15
  - 0.0
  - 0.0
  - 0.0   
  - 0.75
  - 0.0   # Strave Thruster
  - 0.75
  - 0.0
  - 0.0
  - 0.0
  - 0.6
# no documentation available for this property
metadata:
  metadata: []
  properties: []
  input_ports: []
  output_ports: []
# This property defines the timeout for the cascade input port in seconds. 0
# means that the timeout would be ignored.
timeout_cascade: 1.0
# This property defines the timeout for the cmd_in input port in seconds. 0
# means that the timeout would be ignored.
timeout_in: 1.0
names: ["pitch", "dive", "right", "left", "yaw", "strave"]
#names: ["right", "left", "dive", "pitch", "strave", "yaw"]

--- name:default_simulation
# Lists which command parameter are being controlled on a per-joint basis.
# 
# If left empty, uses RAW by default
control_modes: []
# This property defines which parts of the command input is expected to be
# set once we merged all the declared input ports.
expected_inputs:
  linear:
  - true
  - true
  - true
  angular:
  - true
  - true
  - true
# If true, the component will send a zero command before getting into an
# exception state. Otherwise, it will not do anything
keep_position_on_exception: true
# Limits of the thrusters
# 
# Leave empty if you don't want to limit anything (is that really a good
# idea ?)
limits:
  names: ["right", "left", "dive", "pitch", "strave", "yaw"]
  elements:
  - min: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: -1.0
    max: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: 1.0
  - min: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: -1.0
    max: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: 1.0
  - min: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: -1.0
    max: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: 1.0
  - min: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: -1.0
    max: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: 1.0
  - min: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: -1.0
    max: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: 1.0
  - min: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: -1.0
    max: 
      position: .nan
      speed: .nan
      effort: .nan
      raw: 1.0
# Matrix with size of 6 * n. n means the count of thrusters that are used.
# The rows 0 to 2 of the matrix are the linear axis. The lines 3 to 5 of the
# matrix are the angular axis.
matrix:
  rows: 6
  cols: 6
  data:
  - 0.0  # pitch
  - 0.0
  - 0.02
  - 0.0
  - 1.0
  - 0.0
  - 0.0 # dive
  - 0.0
  - -1.0
  - 0.0
  - 0.1
  - 0.0
  - -1.0 # right ?
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 1.0 # left ?
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 0.0 # yaw 
  - 0.0
  - 0.0
  - 0.0
  - 0.0
  - 1.0
  - 0.0 #strave 
  - 1.0
  - 0.0
  - 0.0
  - 0.0
  - 1.0
# no documentation available for this property
metadata:
  metadata: []
  properties: []
  input_ports: []
  output_ports: []
# This property defines the timeout for the cascade input port in seconds. 0
# means that the timeout would be ignored.
timeout_cascade: 1.0
# This property defines the timeout for the cmd_in input port in seconds. 0
# means that the timeout would be ignored.
timeout_in: 1.0
names: ["pitch", "dive", "right", "left", "yaw", "strave"]
#names: ["right", "left", "dive", "pitch", "strave", "yaw"]
--- name:cutoff
limits:
  names: ["right", "left", "dive", "pitch", "strave", "yaw"]
  elements:
  - min: 
      raw: 0
    max: 
      raw: 0
  - min: 
      raw: 0
    max: 
      raw: 0
  - min: 
      raw: 0
    max: 
      raw: 0
  - min: 
      raw: 0
    max: 
      raw: 0
  - min: 
      raw: 0
    max: 
      raw: 0
  - min: 
      raw: 0
    max: 
      raw: 0
